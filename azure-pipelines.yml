name: provision-vm
pool:
  name: Azure Pipelines
  vmImage: 'ubuntu-latest'

trigger:
  - main

variables:
  - group: Az_Credentials
  - name: tfWorkSpace
    value: $(Pipeline.Workspace)/s/

stages:
  - stage: "Terraform_Build"
    displayName: "Terraform Build"
    jobs:
      - job: Terraform_Init
        steps:
          - script: |
                export ARM_ACCESS_KEY=$(ARM_ACCESS_KEY)
                export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
                export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
                export ARM_TENANT_ID=$(ARM_TENANT_ID)
                terraform init
                terraform fmt
            workingDirectory: $(Build.SourcesDirectory)
          - task: Cache@2
            displayName: "Register TF providers"
            inputs:
              key: terraform | $(Agent.OS) | "$(Build.BuildNumber)" | $(Build.SourceVersion)"
              path: "$(tfWorkSpace)"

      - job: Terraform_Plan
        dependsOn: Terraform_Init
        steps:
          - task: Cache@2
            displayName: "Cache TF providers"
            inputs:
              key: terraform | $(Agent.OS) | "$(Build.BuildNumber)" | $(Build.SourceVersion)"
              path: "$(tfWorkSpace)"
          - script: |
                export ARM_ACCESS_KEY=$(ARM_ACCESS_KEY)
                export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
                export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
                export ARM_TENANT_ID=$(ARM_TENANT_ID)
                terraform plan -var-file=auto.tfvars -out output.tfplan
                terraform show -no-color -json output.tfplan > output.json
            displayName: "Terraform Plan"
            workingDirectory: $(tfWorkSpace)
           - task: TerraformOutput@1
             inputs:
               outputFilePath: $(tfWorkSpace)/terraform/output.tfplan
               artifactName: Staging
  - stage: "Review_Terraform_Plan"
    displayName: "Review Terraform Plan"
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    dependsOn: Terraform_Build
    jobs:
      - deployment: Terraform_Apply
        displayName: Terraform Apply
        environment: "Staging"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Cache@2
                  displayName: "Retrieve TF Cache"
                  inputs:
                    key: terraform | $(Agent.OS) | "$(Build.BuildNumber)" | $(Build.SourceVersion)"
                    path: "$(tfWorkSpace)"
                - script: |
                    ls $(tfWorkSpace)/terraform
                    export ARM_ACCESS_KEY=$(ARM_ACCESS_KEY)
                    export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
                    export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
                    export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
                    export ARM_TENANT_ID=$(ARM_TENANT_ID)
                    terraform apply -var-file=auto.tfvars -auto-approve
                  displayName: Terraform Apply
                  workingDirectory: $(tfWorkSpace)
